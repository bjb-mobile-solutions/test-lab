{"version":3,"sources":["javascripts/firebase.js","components/devices/OSStatistics.js","components/devices/DeviceList.js","App.js","serviceWorker.js","index.js","images/juliusbaer-logo.svg"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","settings","timestampsInSnapshots","OSStatistics","AndroidColors","iOSColors","os","this","props","data","iOSCounter","AndroidCounter","Object","keys","map","key","k","value","push","color","react_default","a","createElement","className","dist_default","style","backgroundColor","Component","DeviceList","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onCollectionUpdate","querySnapshot","devices","forEach","doc","_doc$data","model","modelName","osName","osVersion","id","undefined","defineProperty","setState","ref","firestore","collection","unsubscribe","state","onSnapshot","OSStatistics_OSStatistics","device","src","App","BrowserRouter","basename","process","logo","alt","Switch","Route","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"uQAYAA,gBARe,CACXC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,iBAIvBN,cAAqBO,SAZJ,CAAEC,uBAAuB,IAc3BR,kCCZMS,mLAIb,IAAMC,EAAgB,CAClB,YACA,YACA,YACA,YACA,YACA,YACA,aAGEC,EAAY,CACd,YACA,YACA,YACA,YACA,YACA,YACA,aAIEC,EAAKC,KAAKC,MAAMF,GAChBG,EAAO,GAETC,EAAa,EACbC,EAAiB,EAQrB,OAPAC,OAAOC,KAAKP,GAAIQ,IAAI,SAAAC,GAAG,OAAIH,OAAOC,KAAKP,EAAGS,IAAMD,IAAI,SAACE,GACjD,IAAMC,EAAQX,EAAGS,GAAKC,GACtBP,EAAKS,KAAK,CAAED,MAAOA,EAAOE,MAAe,YAARJ,EAAoBX,EAAcO,KAAoBN,EAAUK,WAGrGA,EAAa,EACbC,EAAiB,EAEbS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACIZ,KAAMA,KAGdW,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aAEQV,OAAOC,KAAKP,GAAIQ,IAAI,SAAAC,GAAG,OAAIH,OAAOC,KAAKP,EAAGS,IAAMD,IAAI,SAAAE,GAAC,OAAII,EAAAC,EAAAC,cAAA,MAAIG,MAAO,CAAEC,gBAAyB,YAARX,EAAoBX,EAAcO,KAAoBN,EAAUK,KAAeS,MAAO,SAAWJ,IAAKA,EAAMC,GAC/LI,EAAAC,EAAAC,cAAA,UAAKP,EAAL,IAAWC,GACXI,EAAAC,EAAAC,cAAA,UAAKhB,EAAGS,GAAKC,oBAlDPW,aCCrBC,cACjB,SAAAA,EAAYpB,GAAO,IAAAqB,EAAA,OAAAjB,OAAAkB,EAAA,EAAAlB,CAAAL,KAAAqB,IACfC,EAAAjB,OAAAmB,EAAA,EAAAnB,CAAAL,KAAAK,OAAAoB,EAAA,EAAApB,CAAAgB,GAAAK,KAAA1B,KAAMC,KAUV0B,mBAAqB,SAACC,GAClB,IAAMC,EAAU,GACV9B,EAAK,GACX6B,EAAcE,QAAQ,SAACC,GAAQ,IAAAC,EACqBD,EAAI7B,OAA5C+B,EADmBD,EACnBC,MAAOC,EADYF,EACZE,UAAWC,EADCH,EACDG,OAAQC,EADPJ,EACOI,UAGlCP,EAAQlB,KAAK,CACTH,IAAKuB,EAAIM,GACTN,MACAE,QACAC,YACAC,SACAC,mBAIeE,IAAfvC,EAAGoC,GACHpC,EAAGoC,GAAH9B,OAAAkC,EAAA,EAAAlC,CAAA,GAAgB+B,EAAY,QACKE,IAA1BvC,EAAGoC,GAAQC,GAClBrC,EAAGoC,GAAQC,GAAa,EAExBrC,EAAGoC,GAAQC,IAAc,IAGjCd,EAAKkB,SAAS,CACVX,UACA9B,QApCJuB,EAAKmB,IAAMtD,EAASuD,YAAYC,WAAW,WAC3CrB,EAAKsB,YAAc,KACnBtB,EAAKuB,MAAQ,CACThB,QAAS,GACT9B,GAAI,IANOuB,mFA2CftB,KAAK4C,YAAc5C,KAAKyC,IAAIK,WAAW9C,KAAK2B,qDAI5C,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAACgC,EAAD,CAAchD,GAAIC,KAAK6C,MAAM9C,KAC7Bc,EAAAC,EAAAC,cAAA,UACKf,KAAK6C,MAAMhB,QAAQtB,IAAI,SAAAyC,GAAM,OAC1BnC,EAAAC,EAAAC,cAAA,MAAIP,IAAKwC,EAAOxC,IAAKQ,UAAU,cAC3BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACQ,YAAlBgC,EAAOb,QAAwBtB,EAAAC,EAAAC,cAAA,OAAKkC,IAAI,0DACtB,QAAlBD,EAAOb,QAAoBtB,EAAAC,EAAAC,cAAA,OAAKkC,IAAI,4DAEzCpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,YAAOiC,EAAOd,WACdrB,EAAAC,EAAAC,cAAA,SAAIiC,EAAOb,OAAX,IAAoBa,EAAOZ,wBA9DnBhB,8BC6BzB8B,mLAzBX,OACErC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQC,SAAUC,aAChBxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,OAAKkC,IAAKK,IAAMtC,UAAU,OAAOuC,IAAI,kBACnC1C,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACyC,EAAA,EAAD,KACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvC,IACjCR,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOI,OAAQ,kBACbhD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,2CAKRF,EAAAC,EAAAC,cAAA,gDApBQK,aCKE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAOhD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.23e5d953.chunk.js","sourcesContent":["import * as firebase from 'firebase';\n\nconst settings = { timestampsInSnapshots: true };\n\nconst config = {\n    apiKey: \"AIzaSyD9AtuHI_zqeW3L2s-mTvc-J-281_dpAKw\",\n    authDomain: \"jbtestlab.firebaseapp.com\",\n    databaseURL: \"https://jbtestlab.firebaseio.com\",\n    projectId: \"jbtestlab\",\n    storageBucket: \"jbtestlab.appspot.com\",\n    messagingSenderId: \"242278540925\"\n};\nfirebase.initializeApp(config);\n\nfirebase.firestore().settings(settings);\n\nexport default firebase;","import React, { Component } from 'react';\nimport './OSStatistics.css';\nimport PieChart from 'react-minimal-pie-chart';\n\nexport default class OSStatistics extends Component {\n\n\n    render() {\n        const AndroidColors = [\n            '#006400ff',\n            '#006400dd',\n            '#006400bb',\n            '#00640099',\n            '#00640077',\n            '#00640055',\n            '#00640033',\n        ];\n\n        const iOSColors = [\n            '#f39c12ff',\n            '#f39c12dd',\n            '#f39c12bb',\n            '#f39c1299',\n            '#f39c1277',\n            '#f39c1255',\n            '#f39c1233',\n        ];\n\n\n        const os = this.props.os\n        const data = []\n\n        var iOSCounter = 0\n        var AndroidCounter = 0\n        Object.keys(os).map(key => Object.keys(os[key]).map((k) => {\n            const value = os[key][k]\n            data.push({ value: value, color: key === 'Android' ? AndroidColors[AndroidCounter++] : iOSColors[iOSCounter++] })\n        }))\n\n        iOSCounter = 0\n        AndroidCounter = 0\n        return (\n            <div className='OSStatistics'>\n                <div className='PieChart'>\n                    <PieChart\n                        data={data}\n                    />\n                </div>\n                <div>\n                    <table className='Table'>\n                        <tbody>\n                            {\n                                Object.keys(os).map(key => Object.keys(os[key]).map(k => <tr style={{ backgroundColor: key === 'Android' ? AndroidColors[AndroidCounter++] : iOSColors[iOSCounter++], color: 'white' }} key={key + k}>\n                                    <td>{key} {k}</td>\n                                    <td>{os[key][k]}</td>\n                                </tr>))\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './DeviceList.css';\nimport firebase from '../../javascripts/firebase';\nimport OSStatistics from './OSStatistics';\n\nexport default class DeviceList extends Component {\n    constructor(props) {\n        super(props)\n        this.ref = firebase.firestore().collection('devices')\n        this.unsubscribe = null\n        this.state = {\n            devices: [],\n            os: {}\n            // os: { 'Android': { '9': 2, '7.0': 1 }, 'iOS': { '12.0': 1 } }\n        }\n    }\n\n    onCollectionUpdate = (querySnapshot) => {\n        const devices = []\n        const os = {}\n        querySnapshot.forEach((doc) => {\n            const { model, modelName, osName, osVersion } = doc.data()\n\n            // devices\n            devices.push({\n                key: doc.id,\n                doc, // DocumentSnapshot\n                model,\n                modelName,\n                osName,\n                osVersion,\n            })\n\n            // OS\n            if (os[osName] === undefined) {\n                os[osName] = { [osVersion]: 1 }\n            } else if (os[osName][osVersion] === undefined) {\n                os[osName][osVersion] = 1\n            } else {\n                os[osName][osVersion] += 1\n            }\n        })\n        this.setState({\n            devices,\n            os\n        })\n    }\n\n    componentDidMount() {\n        this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate)\n    }\n\n    render() {\n        return (\n            <div className='DeviceList'>\n                <h2>Device List</h2>\n\n                <OSStatistics os={this.state.os} />\n                <ul>\n                    {this.state.devices.map(device =>\n                        <li key={device.key} className='DeviceItem'>\n                            <div className='PlatformIcon'>\n                                {device.osName === 'Android' && <img src=\"https://img.icons8.com/color/48/000000/android-os.png\" />}\n                                {device.osName === 'iOS' && <img src=\"https://img.icons8.com/ios/48/000000/mac-os-filled.png\" />}\n                            </div>\n                            <div className='DeviceInfo'>\n                                <span>{device.modelName}</span>\n                                <p>{device.osName} {device.osVersion}</p>\n                            </div>\n                        </li>\n                    )}\n                </ul>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport './App.css';\nimport DeviceList from './components/devices/DeviceList';\nimport logo from './images/juliusbaer-logo.svg';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <div className=\"App-header\">\n          <img src={logo} className=\"Logo\" alt=\"Julius BÃ¤r\" />\n            <p>Test Lab</p>\n          </div>\n          <div className=\"App-content\">\n            <Switch>\n              <Route exact path='/' component={DeviceList} />\n              <Route render={() =>\n                <div>\n                  <h1>Oops...</h1>\n                  <h2>Something went wrong :(</h2>\n                </div>\n              } />\n            </Switch>\n          </div>\n          <footer>version: 0.0.1 (beta)</footer>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/juliusbaer-logo.7ad68856.svg\";"],"sourceRoot":""}